

-- Dealing with duplicate products

Here is a camera that occurs twice in products.txt:

line 186:
  {"product_name":"Samsung-SL202","manufacturer":"Samsung","model":"SL202"...}
line 258:
  {"product_name":"Samsung_SL202","manufacturer":"Samsung","model":"SL202"...}

Although the product_name property differs, the manufacturer and model
properties are identical. We can filter out duplicate products at various
stages in the matching process. If we do so before looking for matches,
we don't have to deal with duplicate products during disambiguation. So
let's do that. In each group of duplicate products, we'll use the one
that occurs first and discard the rest.


-- Disambiguation: handling cases with multiple candidates

If there are more than two candidates, we declare no match.

Otherwise, we choose the product with the most detailed match.

Product A has a more detailed match than product B...
- if A's family matches the listing and B's family does not (or is null)
- otherwise, if A has more model tokens than B
- otherwise, if the sum of the lengths of A's model tokens exceeds that of B

If there is still a tie, we declare no match.


-- Troublesome listings

17
- this looks like a detailed match except that the listing is about a battery
- I don't see how I can eliminate this without natural-language parsing

7241
- as with listing 17, the match looks pretty good unless you understand English

756, 1349, 1452, 1453
- if I require that the family occur right before the model, these will fail

22
- mentions many products, only two of which are listed in products.txt
- sometimes the product list isn't comprehensive enough, but in this
  case the listing is erroneous: the product names are reversed
- even the two matches aren't right: the tokens are separated by commas
- one of the two has a more detailed match than the rest

15274
- matches product 123, the Leica Digilux Zoom
- I could eliminate this by requiring a family match


-- Dilemma

Should we require that the product family, if specified for a product,
be present in the listing? This would improve precision at the expense
of recall. It seems to be a shame to lose a bunch of listings that merely
fail to mention the product family.

On the other hand, the challenge instructions say that precision is much
more important than recall:

  "Precision is critical. We much prefer missed matches (lower recall)
  over incorrect matches, so try hard to avoid false positives."

What if we only require the family to match in ambiguous cases? Hmm. What
to do? Code it and run it. Get some hard stats. View the results.


-- Making detail_compare more conservative

Currently I rely on the three rules in detail_compare to disambiguate
multiple-match cases. The first rule is conceptually sound: if candidate
A has a family match with the target listing and candidate B doesn't,
I say that A is a more detailed match than B.

The other two rules are dodgy. If one candidate has more tokens than
another, I say that it's a more detailed match. How does that make
sense? A model name consisting of a single token may very well be a
semantically better match than a model name with three tokens. "One token
good, three tokens better" is almost as wrongheaded as "Four legs good,
two legs better". My last disambiguating rule is even more foolish. If
the sum of the token lengths is greater, I say that it's a more detailed
match. Ridiculous! Why should a longer model name be better?

I have these rules because they're effective, not because they make
sense. Visual inspection leads me to believe that they improve recall
with little or no loss of precision. However, this is probably an
accident. My quirky rules happen to work for this collection of listings
and products. I can easily see them leading to a significant loss of
precision on a different test set. Therefore, I'll abandon them even
though I know my recall will decline. Precision is paramount.


-- Further tightening

I can eliminate some spurious matches by requiring the family value, if
any, to occur immediately before the model in the listing. For example,
take this title in listing 7241:

  Leica 'Digilux 2' 5MP Digital Camera with 3.2x Optical Zoom

Currently I match product 123, with family "Digilux" and model "Zoom",
to the listing. But the model named in the listing is the Digilux 2,
not the Digilux Zoom.

Requiring the family value to occur immediately before the model value is
equivalent to concatenating the family tokens and model tokens. However,
I'll keep the token lists separate so that I can easily switch between
loose matching and tight matching.

I hope the loss in recall will be acceptable when weighed against the
increase in precision.



-- A slight loosening

check whether one product's model is a superlist of the other's


